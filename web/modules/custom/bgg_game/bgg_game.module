<?php

/**
 * @file
 * Contains bgg_game.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Queue\QueueFactory;
use Drupal\Core\Queue\QueueInterface;

/**
 * Implements hook_help().
 */
function bgg_game_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the bgg_game module.
    case 'help.page.bgg_game':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Update a Game with full details from the BGG API.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function bgg_game_theme() {
  return [
    'bgg_game' => [
      'render element' => 'children',
    ],
  ];
}

/**
 * Implements hook_cron().
 */
function bgg_game_cron() {
  /** @var QueueFactory $queue_factory */
  $queue_factory = \Drupal::service('queue');
  /** @var QueueInterface $queue */
  $queue = $queue_factory->get('bgg_games');

  $logger = \Drupal::logger('BGG Game');

  // Get the queue.
  if (\Drupal::state()->get(__FUNCTION__ . '_clear_queue', FALSE)) {
    $queue->deleteQueue();
    \Drupal::state()->delete(__FUNCTION__ . '_clear_queue');
    $logger->notice('deleted queue');
    return;
  }

  // If the queue has items, process them.
  if ($queue->numberOfItems()) {
    $logger->notice("Queue has " . $queue->numberOfItems() . " BGG Games.");
    $bgg = \Drupal::service('bgg_game.update_game_from_bgg');

    $item = $queue->claimItem();
    if ($bgg->update((int) $item->data->nid)) {
      $queue->deleteItem($item);
    }
    else {
      $queue->releaseItem($item);
    }
  }
  // If the queue is empty, populate it.
  else {
    // Fetch all bgg_game nids and add them to the queue.
    $query = \Drupal::entityQuery('node')
      ->condition('type', 'bgg_game'); //specify results to return
    $nids = $query->execute();
    $logger->notice("Added " . count($nids) . " BGG Games to queue.");
    foreach ($nids as $nid) {
      $item = new \stdClass();
      $item->nid = $nid;
      $queue->createItem($item);
    }
  }
}

// /**
//  * Update a BGG Game node from BGG API.
//  * 
//  * @param object $item
//  *   A nid. In an object.
//  * @return bool
//  *   TRUE on success
//  */
// function bgg_game_update_from_bgg($item) {
//   $logger = \Drupal::logger('BGG Game');
//   $logger->notice("Processing " . $item->nid);

//   $bgg = \Drupal::service('bgg_game.update_game_from_bgg');
//   if ($bgg->update((int) $item->nid)) {
//     $item->delete();
//   }
//   else {
//     $item->
//   }

//   // Fetch the Node.
//   /** @var NodeInterface $node */
//   if ($node = \Drupal\node\Entity\Node::load((int) $item->nid)) {
//     // // Fetch the Game from the BGG API.
//     // $bggid = $node->getTitle();
//     // $logger->notice('bggid: ' . print_r($bggid, 1));
//     // $url = "https://boardgamegeek.com/xmlapi2/thing?id=" . $bggid;
//     // $client = \Drupal::httpClient();
//     // $request = $client->get($url);
//     // $logger->notice("Status Code: " . print_r($request->getStatusCode(), 1));
//     // $logger->notice("Request: " . print_r($request, 1));
//     // $body = $request->getBody()->getContents();
//     // $logger->notice("Body: " . print_r($body, 1));
//     // #$xmlDecoder = \Drupal::get('serializer');
//     // //$xmlDecoder = new XmlEncoder();
//     // #$game = $xmlDecoder->decode($body);
//     // $p = xml_parser_create();
//     // xml_parse_into_struct($p, $body, $vals, $index);
//     // xml_parser_free($p);
//     // #$logger->notice("Game: " . print_r($game, 1));
//     // //$logger->notice("index: " . print_r($index, 1));
//     // //$logger->notice("vals: " . print_r($vals, 1));
//     return TRUE;
//   }
//   else {
//     $logger->error("Unable to fetch node $nid");
//     return FALSE;
//   }
// }
