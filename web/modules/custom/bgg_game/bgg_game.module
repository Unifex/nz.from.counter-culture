<?php

/**
 * @file
 * Contains bgg_game.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Queue\QueueFactory;
use Drupal\Core\Queue\QueueInterface;

/**
 * Implements hook_help().
 */
function bgg_game_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the bgg_game module.
    case 'help.page.bgg_game':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('A Game from the BGG API.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function bgg_game_theme() {
  return [
    'bgg_game' => [
      'render element' => 'children',
    ],
  ];
}

function bgg_game_cron() {
  // Get the queue.
  $queue = \Drupal::queue('bgg_games');
  // If the queue has items, process them.
  if ($queue->numberOfItems()) {
    \Drupal::logger('BGG Game')->notice("Queue has " . $queue->numberOfItems() . " BGG Games.");
  }
  // If the queue is empty, populate it.
  else {
    // Fetch all bgg_game nids and add them to the queue.
    $query = \Drupal::entityQuery('node')
      ->condition('status', 1)
      ->condition('type', 'bgg_game'); //specify results to return
    $nids = $query->execute();
    \Drupal::logger('BGG Game')->notice("Added " . count($nids) . " BGG Games to queue.");
    foreach ($nids as $nid) {
      $item = new \stdClass();
      $item->nid = $nid;
      $queue->createItem($item);
    }
  }
}